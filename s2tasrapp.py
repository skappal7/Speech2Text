# -*- coding: utf-8 -*-
"""ASRText.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NnmWYnwcKyhkXq5saqjUYAZsA3MR8ms5
"""

import streamlit as st
import requests
from TextBlob import TextBlob  # For sentiment analysis
from wordcloud import WordCloud  # For keyword extraction
import matplotlib.pyplot as plt

# Define API and headers
API_URL = "https://api-inference.huggingface.co/models/openai/whisper-large-v3"
headers = {"Authorization": "Bearer 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"}

st.set_page_config(
    page_title="Speech-to-Text and Text Analytics with Whisper Large V3",
    page_icon="ðŸŽ¤",
)

st.title("Real-Time Speech-to-Text with Whisper Large V3")
st.write("Upload an audio file (in FLAC format) and perform text analytics.")

# Create a file upload widget
audio_file = st.file_uploader("Upload an audio file (in FLAC format)")

if audio_file is not None:
    st.audio(audio_file)

    if st.button("Transcribe"):
        # Make a request to the Whisper API
        response = requests.post(API_URL, headers=headers, data=audio_file.read())

        if response.status_code == 200:
            result = response.json()
            if "text" in result:
                st.success("Transcription Result:")
                transcription = result["text"]
                st.write(transcription)

                # Text Analytics
                st.markdown("### Text Analytics")
                # Sentiment Analysis
                blob = TextBlob(transcription)
                sentiment_score = blob.sentiment.polarity
                sentiment_label = "Positive" if sentiment_score > 0 else "Negative" if sentiment_score < 0 else "Neutral"
                st.write(f"Sentiment: {sentiment_label} (Polarity Score: {sentiment_score:.2f})")

                # Keyword Extraction
                wordcloud = WordCloud(width=800, height=400).generate(transcription)
                st.markdown("### Keyword Extraction")
                st.image(wordcloud.to_image(), use_container_width=True)

            else:
                st.error("Transcription failed. Check the audio file format.")
        else:
            st.error(f"Request failed with status code: {response.status_code}")

st.write("Note: Whisper is a pre-trained model for automatic speech recognition (ASR) and speech translation. Trained on 680k hours of labelled data, Whisper models demonstrate a strong ability to generalize to many datasets and domains without the need for fine-tuning.")

